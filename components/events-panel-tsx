"use client"

import { useState } from "react"
import { type User, db } from "@/lib/database"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { ArrowLeft, Calendar, Clock, Star } from "lucide-react"

interface EventsPanelProps {
  user: User
  onClose: () => void
}

export default function EventsPanel({ user, onClose }: EventsPanelProps) {
  const [joinedEvents, setJoinedEvents] = useState<string[]>([])
  const allEvents = db.getAllEvents()

  const joinEvent = (eventId: string) => {
    setJoinedEvents((prev) => [...prev, eventId])
  }

  const leaveEvent = (eventId: string) => {
    setJoinedEvents((prev) => prev.filter((id) => id !== eventId))
  }

  return (
    <div className="h-screen bg-background flex">
      <div className="w-60 bg-secondary/50 p-4">
        <Button variant="ghost" className="w-full justify-start mb-4" onClick={onClose}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Chat
        </Button>

        <div className="space-y-2">
          <Button variant="ghost" className="w-full justify-start">
            <Calendar className="h-4 w-4 mr-2" />
            All Events
          </Button>
          <Button variant="ghost" className="w-full justify-start">
            <Star className="h-4 w-4 mr-2" />
            My Events
          </Button>
          <Button variant="ghost" className="w-full justify-start">
            <Clock className="h-4 w-4 mr-2" />
            Upcoming
          </Button>
        </div>
      </div>

      <div className="flex-1 p-8">
        <div className="max-w-4xl">
          <div className="flex items-center space-x-2 mb-6">
            <Calendar className="h-6 w-6 text-purple-500" />
            <h1 className="text-2xl font-bold">Community Events</h1>
          </div>

          {allEvents.length === 0 ? (
            <Card>
              <CardContent className="text-center py-12">
                <Calendar className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Events Yet</h3>
                <p className="text-muted-foreground">Check back later for community events!</p>
              </CardContent>
            </Card>
          ) : (
            <div className="grid gap-6">
              {allEvents.map((event) => {
                const creator = db.getUser(event.createdBy)
                const isJoined = joinedEvents.includes(event.id)

                return (
                  <Card key={event.id} className="overflow-hidden">
                    <CardHeader className="opal-gradient text-white">
                      <div className="flex items-start justify-between">
                        <div className="space-y-2">
                          <CardTitle className="text-xl">{event.title}</CardTitle>
                          <div className="flex items-center space-x-4 text-sm">
                            <div className="flex items-center space-x-1">
                              <Calendar className="h-4 w-4" />
                              <span>{event.startDate.toLocaleDateString()}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Clock className="h-4 w-4" />
                              <span>{event.startDate.toLocaleTimeString()}</span>
                            </div>
                          </div>
                        </div>
                        <Badge variant="secondary" className="bg-white/20 text-white">
                          {event.participants.length + joinedEvents.filter((id) => id === event.id).length} joined
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="p-6">
                      <div className="space-y-4">
                        <p className="text-muted-foreground">{event.description}</p>

                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <span className="text-sm text-muted-foreground">Created by:</span>
                            {creator && (
                              <div className="flex items-center space-x-2">
                                <Avatar className="h-6 w-6">
                                  <AvatarImage src={creator.avatar || "/placeholder.svg"} />
                                  <AvatarFallback className="text-xs">{creator.displayName.charAt(0)}</AvatarFallback>
                                </Avatar>
                                <span className="text-sm font-medium">{creator.displayName}</span>
                              </div>
                            )}
                          </div>

                          <Button
                            variant={isJoined ? "outline" : "default"}
                            onClick={() => (isJoined ? leaveEvent(event.id) : joinEvent(event.id))}
                          >
                            {isJoined ? "Leave Event" : "Join Event"}
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
"use client"

import { useState } from "react"
import { type User, db } from "@/lib/database"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { ArrowLeft, Calendar, Clock, Star } from "lucide-react"

interface EventsPanelProps {
  user: User
  onClose: () => void
}

export default function EventsPanel({ user, onClose }: EventsPanelProps) {
  const [joinedEvents, setJoinedEvents] = useState<string[]>([])
  const allEvents = db.getAllEvents()

  const joinEvent = (eventId: string) => {
    setJoinedEvents((prev) => [...prev, eventId])
  }

  const leaveEvent = (eventId: string) => {
    setJoinedEvents((prev) => prev.filter((id) => id !== eventId))
  }

  return (
    <div className="h-screen bg-background flex">
      <div className="w-60 bg-secondary/50 p-4">
        <Button variant="ghost" className="w-full justify-start mb-4" onClick={onClose}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Chat
        </Button>

        <div className="space-y-2">
          <Button variant="ghost" className="w-full justify-start">
            <Calendar className="h-4 w-4 mr-2" />
            All Events
          </Button>
          <Button variant="ghost" className="w-full justify-start">
            <Star className="h-4 w-4 mr-2" />
            My Events
          </Button>
          <Button variant="ghost" className="w-full justify-start">
            <Clock className="h-4 w-4 mr-2" />
            Upcoming
          </Button>
        </div>
      </div>

      <div className="flex-1 p-8">
        <div className="max-w-4xl">
          <div className="flex items-center space-x-2 mb-6">
            <Calendar className="h-6 w-6 text-purple-500" />
            <h1 className="text-2xl font-bold">Community Events</h1>
          </div>

          {allEvents.length === 0 ? (
            <Card>
              <CardContent className="text-center py-12">
                <Calendar className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Events Yet</h3>
                <p className="text-muted-foreground">Check back later for community events!</p>
              </CardContent>
            </Card>
          ) : (
            <div className="grid gap-6">
              {allEvents.map((event) => {
                const creator = db.getUser(event.createdBy)
                const isJoined = joinedEvents.includes(event.id)

                return (
                  <Card key={event.id} className="overflow-hidden">
                    <CardHeader className="opal-gradient text-white">
                      <div className="flex items-start justify-between">
                        <div className="space-y-2">
                          <CardTitle className="text-xl">{event.title}</CardTitle>
                          <div className="flex items-center space-x-4 text-sm">
                            <div className="flex items-center space-x-1">
                              <Calendar className="h-4 w-4" />
                              <span>{event.startDate.toLocaleDateString()}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Clock className="h-4 w-4" />
                              <span>{event.startDate.toLocaleTimeString()}</span>
                            </div>
                          </div>
                        </div>
                        <Badge variant="secondary" className="bg-white/20 text-white">
                          {event.participants.length + joinedEvents.filter((id) => id === event.id).length} joined
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="p-6">
                      <div className="space-y-4">
                        <p className="text-muted-foreground">{event.description}</p>

                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <span className="text-sm text-muted-foreground">Created by:</span>
                            {creator && (
                              <div className="flex items-center space-x-2">
                                <Avatar className="h-6 w-6">
                                  <AvatarImage src={creator.avatar || "/placeholder.svg"} />
                                  <AvatarFallback className="text-xs">{creator.displayName.charAt(0)}</AvatarFallback>
                                </Avatar>
                                <span className="text-sm font-medium">{creator.displayName}</span>
                              </div>
                            )}
                          </div>

                          <Button
                            variant={isJoined ? "outline" : "default"}
                            onClick={() => (isJoined ? leaveEvent(event.id) : joinEvent(event.id))}
                          >
                            {isJoined ? "Leave Event" : "Join Event"}
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
"use client"

import { useState } from "react"
import { type User, db } from "@/lib/database"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { ArrowLeft, Calendar, Clock, Star } from "lucide-react"

interface EventsPanelProps {
  user: User
  onClose: () => void
}

export default function EventsPanel({ user, onClose }: EventsPanelProps) {
  const [joinedEvents, setJoinedEvents] = useState<string[]>([])
  const allEvents = db.getAllEvents()

  const joinEvent = (eventId: string) => {
    setJoinedEvents((prev) => [...prev, eventId])
  }

  const leaveEvent = (eventId: string) => {
    setJoinedEvents((prev) => prev.filter((id) => id !== eventId))
  }

  return (
    <div className="h-screen bg-background flex">
      <div className="w-60 bg-secondary/50 p-4">
        <Button variant="ghost" className="w-full justify-start mb-4" onClick={onClose}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Chat
        </Button>

        <div className="space-y-2">
          <Button variant="ghost" className="w-full justify-start">
            <Calendar className="h-4 w-4 mr-2" />
            All Events
          </Button>
          <Button variant="ghost" className="w-full justify-start">
            <Star className="h-4 w-4 mr-2" />
            My Events
          </Button>
          <Button variant="ghost" className="w-full justify-start">
            <Clock className="h-4 w-4 mr-2" />
            Upcoming
          </Button>
        </div>
      </div>

      <div className="flex-1 p-8">
        <div className="max-w-4xl">
          <div className="flex items-center space-x-2 mb-6">
            <Calendar className="h-6 w-6 text-purple-500" />
            <h1 className="text-2xl font-bold">Community Events</h1>
          </div>

          {allEvents.length === 0 ? (
            <Card>
              <CardContent className="text-center py-12">
                <Calendar className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Events Yet</h3>
                <p className="text-muted-foreground">Check back later for community events!</p>
              </CardContent>
            </Card>
          ) : (
            <div className="grid gap-6">
              {allEvents.map((event) => {
                const creator = db.getUser(event.createdBy)
                const isJoined = joinedEvents.includes(event.id)

                return (
                  <Card key={event.id} className="overflow-hidden">
                    <CardHeader className="opal-gradient text-white">
                      <div className="flex items-start justify-between">
                        <div className="space-y-2">
                          <CardTitle className="text-xl">{event.title}</CardTitle>
                          <div className="flex items-center space-x-4 text-sm">
                            <div className="flex items-center space-x-1">
                              <Calendar className="h-4 w-4" />
                              <span>{event.startDate.toLocaleDateString()}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Clock className="h-4 w-4" />
                              <span>{event.startDate.toLocaleTimeString()}</span>
                            </div>
                          </div>
                        </div>
                        <Badge variant="secondary" className="bg-white/20 text-white">
                          {event.participants.length + joinedEvents.filter((id) => id === event.id).length} joined
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="p-6">
                      <div className="space-y-4">
                        <p className="text-muted-foreground">{event.description}</p>

                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <span className="text-sm text-muted-foreground">Created by:</span>
                            {creator && (
                              <div className="flex items-center space-x-2">
                                <Avatar className="h-6 w-6">
                                  <AvatarImage src={creator.avatar || "/placeholder.svg"} />
                                  <AvatarFallback className="text-xs">{creator.displayName.charAt(0)}</AvatarFallback>
                                </Avatar>
                                <span className="text-sm font-medium">{creator.displayName}</span>
                              </div>
                            )}
                          </div>

                          <Button
                            variant={isJoined ? "outline" : "default"}
                            onClick={() => (isJoined ? leaveEvent(event.id) : joinEvent(event.id))}
                          >
                            {isJoined ? "Leave Event" : "Join Event"}
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
"use client"

import { useState } from "react"
import { type User, db } from "@/lib/database"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { ArrowLeft, Calendar, Clock, Star } from "lucide-react"

interface EventsPanelProps {
  user: User
  onClose: () => void
}

export default function EventsPanel({ user, onClose }: EventsPanelProps) {
  const [joinedEvents, setJoinedEvents] = useState<string[]>([])
  const allEvents = db.getAllEvents()

  const joinEvent = (eventId: string) => {
    setJoinedEvents((prev) => [...prev, eventId])
  }

  const leaveEvent = (eventId: string) => {
    setJoinedEvents((prev) => prev.filter((id) => id !== eventId))
  }

  return (
    <div className="h-screen bg-background flex">
      <div className="w-60 bg-secondary/50 p-4">
        <Button variant="ghost" className="w-full justify-start mb-4" onClick={onClose}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Chat
        </Button>

        <div className="space-y-2">
          <Button variant="ghost" className="w-full justify-start">
            <Calendar className="h-4 w-4 mr-2" />
            All Events
          </Button>
          <Button variant="ghost" className="w-full justify-start">
            <Star className="h-4 w-4 mr-2" />
            My Events
          </Button>
          <Button variant="ghost" className="w-full justify-start">
            <Clock className="h-4 w-4 mr-2" />
            Upcoming
          </Button>
        </div>
      </div>

      <div className="flex-1 p-8">
        <div className="max-w-4xl">
          <div className="flex items-center space-x-2 mb-6">
            <Calendar className="h-6 w-6 text-purple-500" />
            <h1 className="text-2xl font-bold">Community Events</h1>
          </div>

          {allEvents.length === 0 ? (
            <Card>
              <CardContent className="text-center py-12">
                <Calendar className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Events Yet</h3>
                <p className="text-muted-foreground">Check back later for community events!</p>
              </CardContent>
            </Card>
          ) : (
            <div className="grid gap-6">
              {allEvents.map((event) => {
                const creator = db.getUser(event.createdBy)
                const isJoined = joinedEvents.includes(event.id)

                return (
                  <Card key={event.id} className="overflow-hidden">
                    <CardHeader className="opal-gradient text-white">
                      <div className="flex items-start justify-between">
                        <div className="space-y-2">
                          <CardTitle className="text-xl">{event.title}</CardTitle>
                          <div className="flex items-center space-x-4 text-sm">
                            <div className="flex items-center space-x-1">
                              <Calendar className="h-4 w-4" />
                              <span>{event.startDate.toLocaleDateString()}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Clock className="h-4 w-4" />
                              <span>{event.startDate.toLocaleTimeString()}</span>
                            </div>
                          </div>
                        </div>
                        <Badge variant="secondary" className="bg-white/20 text-white">
                          {event.participants.length + joinedEvents.filter((id) => id === event.id).length} joined
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="p-6">
                      <div className="space-y-4">
                        <p className="text-muted-foreground">{event.description}</p>

                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <span className="text-sm text-muted-foreground">Created by:</span>
                            {creator && (
                              <div className="flex items-center space-x-2">
                                <Avatar className="h-6 w-6">
                                  <AvatarImage src={creator.avatar || "/placeholder.svg"} />
                                  <AvatarFallback className="text-xs">{creator.displayName.charAt(0)}</AvatarFallback>
                                </Avatar>
                                <span className="text-sm font-medium">{creator.displayName}</span>
                              </div>
                            )}
                          </div>

                          <Button
                            variant={isJoined ? "outline" : "default"}
                            onClick={() => (isJoined ? leaveEvent(event.id) : joinEvent(event.id))}
                          >
                            {isJoined ? "Leave Event" : "Join Event"}
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
"use client"

import { useState } from "react"
import { type User, db } from "@/lib/database"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { ArrowLeft, Calendar, Clock, Star } from "lucide-react"

interface EventsPanelProps {
  user: User
  onClose: () => void
}

export default function EventsPanel({ user, onClose }: EventsPanelProps) {
  const [joinedEvents, setJoinedEvents] = useState<string[]>([])
  const allEvents = db.getAllEvents()

  const joinEvent = (eventId: string) => {
    setJoinedEvents((prev) => [...prev, eventId])
  }

  const leaveEvent = (eventId: string) => {
    setJoinedEvents((prev) => prev.filter((id) => id !== eventId))
  }

  return (
    <div className="h-screen bg-background flex">
      <div className="w-60 bg-secondary/50 p-4">
        <Button variant="ghost" className="w-full justify-start mb-4" onClick={onClose}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Chat
        </Button>

        <div className="space-y-2">
          <Button variant="ghost" className="w-full justify-start">
            <Calendar className="h-4 w-4 mr-2" />
            All Events
          </Button>
          <Button variant="ghost" className="w-full justify-start">
            <Star className="h-4 w-4 mr-2" />
            My Events
          </Button>
          <Button variant="ghost" className="w-full justify-start">
            <Clock className="h-4 w-4 mr-2" />
            Upcoming
          </Button>
        </div>
      </div>

      <div className="flex-1 p-8">
        <div className="max-w-4xl">
          <div className="flex items-center space-x-2 mb-6">
            <Calendar className="h-6 w-6 text-purple-500" />
            <h1 className="text-2xl font-bold">Community Events</h1>
          </div>

          {allEvents.length === 0 ? (
            <Card>
              <CardContent className="text-center py-12">
                <Calendar className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Events Yet</h3>
                <p className="text-muted-foreground">Check back later for community events!</p>
              </CardContent>
            </Card>
          ) : (
            <div className="grid gap-6">
              {allEvents.map((event) => {
                const creator = db.getUser(event.createdBy)
                const isJoined = joinedEvents.includes(event.id)

                return (
                  <Card key={event.id} className="overflow-hidden">
                    <CardHeader className="opal-gradient text-white">
                      <div className="flex items-start justify-between">
                        <div className="space-y-2">
                          <CardTitle className="text-xl">{event.title}</CardTitle>
                          <div className="flex items-center space-x-4 text-sm">
                            <div className="flex items-center space-x-1">
                              <Calendar className="h-4 w-4" />
                              <span>{event.startDate.toLocaleDateString()}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Clock className="h-4 w-4" />
                              <span>{event.startDate.toLocaleTimeString()}</span>
                            </div>
                          </div>
                        </div>
                        <Badge variant="secondary" className="bg-white/20 text-white">
                          {event.participants.length + joinedEvents.filter((id) => id === event.id).length} joined
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="p-6">
                      <div className="space-y-4">
                        <p className="text-muted-foreground">{event.description}</p>

                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <span className="text-sm text-muted-foreground">Created by:</span>
                            {creator && (
                              <div className="flex items-center space-x-2">
                                <Avatar className="h-6 w-6">
                                  <AvatarImage src={creator.avatar || "/placeholder.svg"} />
                                  <AvatarFallback className="text-xs">{creator.displayName.charAt(0)}</AvatarFallback>
                                </Avatar>
                                <span className="text-sm font-medium">{creator.displayName}</span>
                              </div>
                            )}
                          </div>

                          <Button
                            variant={isJoined ? "outline" : "default"}
                            onClick={() => (isJoined ? leaveEvent(event.id) : joinEvent(event.id))}
                          >
                            {isJoined ? "Leave Event" : "Join Event"}
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
"use client"

import { useState } from "react"
import { type User, db } from "@/lib/database"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { ArrowLeft, Calendar, Clock, Star } from "lucide-react"

interface EventsPanelProps {
  user: User
  onClose: () => void
}

export default function EventsPanel({ user, onClose }: EventsPanelProps) {
  const [joinedEvents, setJoinedEvents] = useState<string[]>([])
  const allEvents = db.getAllEvents()

  const joinEvent = (eventId: string) => {
    setJoinedEvents((prev) => [...prev, eventId])
  }

  const leaveEvent = (eventId: string) => {
    setJoinedEvents((prev) => prev.filter((id) => id !== eventId))
  }

  return (
    <div className="h-screen bg-background flex">
      <div className="w-60 bg-secondary/50 p-4">
        <Button variant="ghost" className="w-full justify-start mb-4" onClick={onClose}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Chat
        </Button>

        <div className="space-y-2">
          <Button variant="ghost" className="w-full justify-start">
            <Calendar className="h-4 w-4 mr-2" />
            All Events
          </Button>
          <Button variant="ghost" className="w-full justify-start">
            <Star className="h-4 w-4 mr-2" />
            My Events
          </Button>
          <Button variant="ghost" className="w-full justify-start">
            <Clock className="h-4 w-4 mr-2" />
            Upcoming
          </Button>
        </div>
      </div>

      <div className="flex-1 p-8">
        <div className="max-w-4xl">
          <div className="flex items-center space-x-2 mb-6">
            <Calendar className="h-6 w-6 text-purple-500" />
            <h1 className="text-2xl font-bold">Community Events</h1>
          </div>

          {allEvents.length === 0 ? (
            <Card>
              <CardContent className="text-center py-12">
                <Calendar className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Events Yet</h3>
                <p className="text-muted-foreground">Check back later for community events!</p>
              </CardContent>
            </Card>
          ) : (
            <div className="grid gap-6">
              {allEvents.map((event) => {
                const creator = db.getUser(event.createdBy)
                const isJoined = joinedEvents.includes(event.id)

                return (
                  <Card key={event.id} className="overflow-hidden">
                    <CardHeader className="opal-gradient text-white">
                      <div className="flex items-start justify-between">
                        <div className="space-y-2">
                          <CardTitle className="text-xl">{event.title}</CardTitle>
                          <div className="flex items-center space-x-4 text-sm">
                            <div className="flex items-center space-x-1">
                              <Calendar className="h-4 w-4" />
                              <span>{event.startDate.toLocaleDateString()}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Clock className="h-4 w-4" />
                              <span>{event.startDate.toLocaleTimeString()}</span>
                            </div>
                          </div>
                        </div>
                        <Badge variant="secondary" className="bg-white/20 text-white">
                          {event.participants.length + joinedEvents.filter((id) => id === event.id).length} joined
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="p-6">
                      <div className="space-y-4">
                        <p className="text-muted-foreground">{event.description}</p>

                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <span className="text-sm text-muted-foreground">Created by:</span>
                            {creator && (
                              <div className="flex items-center space-x-2">
                                <Avatar className="h-6 w-6">
                                  <AvatarImage src={creator.avatar || "/placeholder.svg"} />
                                  <AvatarFallback className="text-xs">{creator.displayName.charAt(0)}</AvatarFallback>
                                </Avatar>
                                <span className="text-sm font-medium">{creator.displayName}</span>
                              </div>
                            )}
                          </div>

                          <Button
                            variant={isJoined ? "outline" : "default"}
                            onClick={() => (isJoined ? leaveEvent(event.id) : joinEvent(event.id))}
                          >
                            {isJoined ? "Leave Event" : "Join Event"}
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
vv
